{"version":3,"sources":["assets/header.png","MyEditor.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","MyEditor","props","state","editorState","EditorState","createEmpty","onChange","setState","handleKeyCommand","bind","command","newState","RichUtils","this","toggleInlineStyle","onClick","_onBoldClick","className","React","Component","App","data","fetch","then","response","text","responseText","JSON","parse","msg","catch","error","console","log","src","require","Grid","container","spacing","item","xs","Table","striped","bordered","hover","variant","size","Badge","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.99cd9ea5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/header.58f0ace4.png\";","import React from 'react';\nimport {Editor, EditorState, RichUtils} from 'draft-js';\n\nclass MyEditor extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {editorState: EditorState.createEmpty()};\n    this.onChange = (editorState) => this.setState({editorState});\n    this.handleKeyCommand = this.handleKeyCommand.bind(this);\n  }\n\n  handleKeyCommand(command, editorState) {\n    const newState = RichUtils.handleKeyCommand(editorState, command);\n    if (newState) {\n      this.onChange(newState);\n      return 'handled';\n    }\n    return 'not-handled';\n  }\n\n  _onBoldClick() {\n    this.onChange(RichUtils.toggleInlineStyle(this.state.editorState, 'BOLD'));\n  }\n\n  render() {\n    return (\n        <div>\n        <button onClick={this._onBoldClick.bind(this)} className=\"mb-3\">Bold</button>\n        <Editor\n        editorState={this.state.editorState} \n        handleKeyCommand={this.handleKeyCommand}\n        onChange={this.onChange} />\n        </div>\n    );\n  }\n}\n\nexport default MyEditor","import React, { Component } from 'react';\nimport './App.css';\nimport Grid from '@material-ui/core/Grid';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Table, Badge } from 'react-bootstrap';\nimport MyEditor from './MyEditor';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: \"\"\n    };\n\n  }\n\n  componentDidMount() {\n    fetch('http://quantsavenue.eu.pythonanywhere.com/')\n      .then(response => response.text())\n      .then(responseText => this.setState({ data: JSON.parse(responseText).msg }))\n      .catch(function (error) {\n        console.log(error);\n      });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div>\n          <header>\n            <img src={require(\"./assets/header.png\")} className=\"img-header\" />\n          </header>\n          <Grid container spacing={3}>\n            <Grid item xs={12}>\n            </Grid>\n            <Grid item xs={6}>\n              <div className=\"subheader\">Terminal</div>\n              <Table striped bordered hover variant=\"dark\" size=\"sm\">\n                <tbody>\n                  <tr>\n                    <td>Dec 15</td>\n                    <td>\n                      <Badge variant=\"light\">Books</Badge>\n                      <span className=\"ml-1\">The man who solved the market</span>\n                    </td>\n                  </tr>\n                </tbody>\n              </Table>\n            </Grid>\n            <Grid item xs={6}>\n              <div className=\"subheader\">Exchange</div>\n              <Table striped bordered hover variant=\"dark\" size=\"sm\">\n                <tbody>\n                  <tr>\n                    <td>Dec 15</td>\n                    <td>\n                      <Badge variant=\"light\">Pricing</Badge>\n                      <span className=\"ml-1\">How to hedge a digital option?</span>\n                    </td>\n                  </tr>\n                </tbody>\n              </Table>\n            </Grid>\n            <Grid item xs={4}>\n              <div className=\"subheader\">Interview Prep</div>\n              <Table striped bordered hover size=\"sm\">\n                <tbody>\n                  <tr>\n                    <td>Brain teasers</td>\n                  </tr>\n                </tbody>\n              </Table>\n            </Grid>\n            <Grid item xs={4}>\n              <div className=\"subheader\">Coaching</div>\n              <Table striped bordered hover size=\"sm\">\n                <tbody>\n                  <tr>\n                    <td>Programming</td>\n                  </tr>\n                  <tr>\n                    <td>Mathematics</td>\n                  </tr>\n                  <tr>\n                    <td>Mock Interview</td>\n                  </tr>\n                </tbody>\n              </Table>\n            </Grid>\n            <Grid item xs={4}>\n              <div className=\"subheader\">Job Opportunities</div>\n              <Table striped bordered hover size=\"sm\">\n                <tbody>\n                  <tr>\n                    <td>\n                      <Badge variant=\"dark\">Citadel</Badge>\n                      <Badge variant=\"success\" className=\"ml-1\">Chicago</Badge> \n                      <span className=\"ml-1\">Quantitative Trader</span>\n                    </td>\n                  </tr>\n                  <tr>\n                    <td>\n                      <Badge variant=\"dark\">Citadel</Badge>\n                      <Badge variant=\"success\" className=\"ml-1\">Chicago</Badge> \n                      <span className=\"ml-1\">Quantitative Analyst</span>\n                    </td>\n                  </tr>\n                </tbody>\n              </Table>\n            </Grid>\n          </Grid>\n          <div>\n          <MyEditor />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}